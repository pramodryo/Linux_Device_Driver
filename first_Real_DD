
/******************************************************Driver.c*******************************************************************/
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/module.h>
#include <linux/kdev_t.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include<linux/slab.h>                 //kmalloc()
#include<linux/uaccess.h>              //copy_to/from_user()
#include <linux/err.h>
#include <linux/export.h>


#define mem_size   1024
dev_t dev=0;
static struct class *dev_class;
static struct cdev etx_cdev;
uint8_t *kernel_buffer;

static int __init etx_driver_init(void);
static void __exit etx_driver_exit(void);

static int etx_open(struct inode *inode, struct file *file);
static ssize_t etx_read(struct file *filp, char __user *buf, size_t len, loff_t *off);
static ssize_t etx_write(struct file *filp, const char __user *buf, size_t len, loff_t *off);
static int etx_release(struct inode *inode, struct file *file);

static struct file_operations fops =
{
        .owner = THIS_MODULE,
        .read = etx_read,
        .open = etx_open,
        .write = etx_write,
        .release = etx_release,
};

static int etx_open(struct inode *inode, struct file *file)
{
pr_info("Device file open...!!!\n");
return 0;
}

static int etx_release(struct inode *inode, struct file *file)
{
pr_info("Device file closed....!!!!\n");
return 0;
}

static ssize_t etx_write(struct file *filp, const char __user *buf, size_t len, loff_t *off)
{
if(copy_from_user(kernel_buffer, buf, len))
{
pr_err("Data write: ERROR\n");
}
pr_info("Data Write Done...\n");
return len;
}


static int __init etx_driver_init(void)
{
if((alloc_chrdev_region(&dev, 0,1, "etx_dev"))<0)
{
pr_info("cannot allocate major number\n");
return -1;
}
pr_info("major:%d minor:%d\n", MAJOR(dev), MINOR(dev));
cdev_init(&etx_cdev, &fops);

if((cdev_add(&etx_cdev, dev,1)) <0)
{
pr_info("cannot add the device to the system\n");
goto r_class;
}

if(IS_ERR(dev_class = class_create("etx_class")))
{
pr_info("cannot create the struct class..\n");
goto r_class;
}

if(IS_ERR(device_create(dev_class,NULL,dev,NULL,"etx_device")))
{
pr_info("cannot create the device 1\n");
goto r_device;
}

if((kernel_buffer = kmalloc(mem_size, GFP_KERNEL)) == 0)
{
pr_info("cannot allocate memory in kernel \n");
goto r_device;
}

strcpy(kernel_buffer, "hello_world");
pr_info("Device driver insert done...\n");
return 0;


r_device:
        class_destroy(dev_class);

r_class:
        unregister_chrdev_region(dev,1);
        return -1;

}

static void __exit etx_driver_exit(void)
{
kfree(kernel_buffer);
device_destroy(dev_class, dev);
class_destroy(dev_class);
cdev_del(&etx_cdev);
unregister_chrdev_region(dev, 1);
pr_info("device Driver Remove....Done\n");
}


module_init(etx_driver_init);
module_exit(etx_driver_exit);


//MODULE_LICENCE("GPL");
MODULE_LICENSE("Dual BSD/GPL");
MODULE_AUTHOR("Pramod Rathod");
MODULE_DESCRIPTION("simple linux DD");
MODULE_VERSION("2:1.0");

/******************************************************Application.c************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

int8_t write_buf[1024];
int8_t read_buf[1024];

int main()
{
        int fd; 
        char option;
        printf("*************** WEL-COME ******************\n");

        fd = open("/dev/etx_device", O_RDWR);
        if(fd < 0) {
                printf("Cannot open device file...\n");
                return 0;
        }

        while(1) {
                printf("****Please Enter the Option******\n");
                printf("        1. Write               \n");
                printf("        2. Read                 \n");
                printf("        3. Exit                 \n");
                printf("*********************************\n");
                scanf(" %c", &option);
                printf("Your Option = %c\n", option);
    
                switch(option) {
                        case '1':
                                printf("Enter the string to write into driver :");
                                scanf("  %[^\t\n]s", write_buf);
                                printf("Data Writing ...");
                                write(fd, write_buf, strlen(write_buf)+1);
                                printf("Done!\n");
                                break;
                        case '2':
                                printf("Data Reading ...");
                                read(fd, read_buf, 1024);
                                printf("Done!\n\n");
                                printf("Data = %s\n\n", read_buf);
                                break;
                        case '3':
                                close(fd);
                                exit(1);
                                break;
                        default:
                                printf("Enter Valid option = %c\n",option);
                                                  break;
                }
        }
        close(fd);
}


/*****************************************Makefile**************************************************/

# Define the module name (without .ko)
obj-m := driver1.o

# Kernel source directory
KDIR := /lib/modules/$(shell uname -r)/build

# Current directory
PWD := $(shell pwd)

# Default target to build the module
all:
        $(MAKE) -C $(KDIR) M=$(PWD) modules

# Clean target to remove generated files
clean:
        $(MAKE) -C $(KDIR) M=$(PWD) clean




/***********************************************************************/

compile driver code: Make
compile application : gcc -o test_app application.c
load module into kernel: sudo insmod driver.ko
check message: dmesg
To check running module in kernel: lsmod   (lsmod | gerp driver)
To remove current running module from kernel: sudo rmmod driver









